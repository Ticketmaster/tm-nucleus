// pass in spacing set name (e.g, 'compact') or map (e.g., ('top': 'compact')) to $outside/inside
@mixin nc-margin($vals, $responsive: true) {
  @if (not $vals) {
    @error 'must specify values for margin';
  }

  @include nc-spacing-generator('margin', $vals, $responsive);
}

@mixin nc-padding($vals, $responsive: true) {
  @if (not $vals) {
    @error 'must specify values for padding';
  }

  @include nc-spacing-generator('padding', $vals, $responsive);
}

@mixin nc-spacing-generator($spacing-type, $spacing-values, $responsive) {
  // map of custom values
  @if (type-of($spacing-values) == map) {
    $shorthand: length($spacing-values) == 4;

    @include nc-spacing-print-map($spacing-type, $spacing-values, 'mini', $shorthand: $shorthand);

    @if ($responsive) {
      @include nc-breakpoint($nc-bp-md) {
        @include nc-spacing-print-map($spacing-type, $spacing-values, 'maxi', $shorthand: $shorthand);
      }
    }
  }

  // list of values
  @else if (type-of($spacing-values) == list) {
    $num: length($spacing-values);
    $valid: $num == 2 or $num == 4;

    @if not $valid {
      @error 'You must specify either 2 or 4 values; #{$spacing-values} only contains #{$num} values';
    }

    $map: (
      'top': nth($spacing-values, 1),
      'right': nth($spacing-values, 2),
      'bottom': nth($spacing-values, if($num == 2, 1, 3)),
      'left': nth($spacing-values, if($num == 2, 2, 4))
    );

    @include nc-spacing-print-map($spacing-type, $map, 'mini', $shorthand: true);

    @if ($responsive) {
      @include nc-breakpoint($nc-bp-md) {
        @include nc-spacing-print-map($spacing-type, $map, 'maxi', $shorthand: true);
      }
    }
  }

  // same values all around
  @else {
    @if (type-of($spacing-values) == number) {
      #{$spacing-type}: $spacing-values;

      @if ($responsive and ($spacing-values != 0)) {
        @include nc-breakpoint($nc-bp-md) {
          #{$spacing-type}: $spacing-values * $nc-spacing-ratio;
        }
      }
    }

    @else {
      #{$spacing-type}: nc-get-nested-map($nc-spacing-map, $spacing-values, 'mini');

      @if ($responsive) {
        @include nc-breakpoint($nc-bp-md) {
          #{$spacing-type}: nc-get-nested-map($nc-spacing-map, $spacing-values, 'maxi');
        }
      }
    }
  }
}


@mixin nc-spacing-print-map($type, $map, $set, $shorthand: false) {
  $direction-list: 'top', 'right', 'bottom', 'left';
  $combined-output: '';

  // verify that the directions are valid
  @each $direction, $value in $map {
    @if (index($direction-list, $direction) == null) {
      @error '#{$direction} is an invalid name for #{$type}';
    }
  }

  @each $direction in $direction-list {
    $output: false;

    @if map-has-key($map, $direction) {
      $value: map-get($map, $direction);
      $is-number: type-of($value) == number;
      $is-negative-string: not $is-number and nc-is-neg-string($value);

      @if ($is-negative-string) {
        $value: str-slice($value, 2, str-length($value));
        $output: nc-spacing-val($value, $set);
        $output: -#{$output};
      }
      @else {
        $output: nc-spacing-val($value, $set);
      }
    }

    @if ($output) {
      @if ($shorthand) {
        $combined-output: #{$combined-output} #{$output};
      }
      @else {
        #{$type}-#{$direction}: $output;
      }
    }
  }

  @if ($shorthand) {
    #{$type}: $combined-output;
  }
}


@function nc-get-spacing($name, $size) {
  @return nc-get-nested-map($nc-spacing-map, $name, $size);
}


// deprecate
@mixin nc-outer-spacing($val: false, $top: 0, $right: 0, $bottom: 0, $left: 0) {
  @warn nc-deprecate('nc-outer-spacing', 'mixin');

  $values: false;

  @if ($val and $val != 'custom') {
    $values: $val;
  }
  @else {
    $values: (
      'top': $top,
      'right': $right,
      'bottom': $bottom,
      'left': $left
    );
  }

  @include nc-margin($values);
}

@mixin nc-inner-spacing($val: false, $top: 0, $right: 0, $bottom: 0, $left: 0) {
  @warn nc-deprecate('nc-inner-spacing', 'mixin');

  $values: false;

  @if ($val and $val != 'custom') {
    $values: $val;
  }
  @else {
    $values: (
      'top': $top,
      'right': $right,
      'bottom': $bottom,
      'left': $left
    );
  }

  @include nc-padding($values);
}
